import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import fs from 'fs';
import path from 'path';

const banner =
    `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';
const outDir = 'build/obsidian-beautiful-illustrations';

// Ensure build directory exists
if (!fs.existsSync(outDir)) {
    fs.mkdirSync(outDir);
}

const buildOptions = {
    banner: {
        js: banner,
    },
    entryPoints: ['src/main.ts'],
    bundle: true,
    external: [
        'obsidian',
        'electron',
        '@codemirror/autocomplete',
        '@codemirror/collab',
        '@codemirror/commands',
        '@codemirror/language',
        '@codemirror/lint',
        '@codemirror/search',
        '@codemirror/state',
        '@codemirror/view',
        '@lezer/common',
        '@lezer/highlight',
        '@lezer/lr',
        ...builtins
    ],
    format: 'cjs',
    target: 'es2018',
    logLevel: 'info',
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: path.join(outDir, 'main.js'),
};

// Function to copy manifest.json
const copyManifest = () => {
    fs.copyFileSync('manifest.json', path.join(outDir, 'manifest.json'));
    console.log('Copied manifest.json to build directory');
};

if (prod) {
    await esbuild.build(buildOptions);
    copyManifest();
    process.exit(0);
} else {
    const ctx = await esbuild.build({
        ...buildOptions,
        watch: {
            onRebuild(error) {
                if (error) console.error('watch build failed:', error);
                else {
                    console.log('watch build succeeded');
                    copyManifest();
                }
            },
        },
    });
    // Initial copy of manifest
    copyManifest();
} 